// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateMaterial {
  count: Int!
}

type AggregateSystem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Material {
  id: ID!
  title: String!
  desc: String
  content: String
  published: Boolean!
  author: User
}

type MaterialConnection {
  pageInfo: PageInfo!
  edges: [MaterialEdge]!
  aggregate: AggregateMaterial!
}

input MaterialCreateInput {
  id: ID
  title: String!
  desc: String
  content: String
  published: Boolean
  author: UserCreateOneWithoutMaterialsInput
}

input MaterialCreateManyWithoutAuthorInput {
  create: [MaterialCreateWithoutAuthorInput!]
  connect: [MaterialWhereUniqueInput!]
}

input MaterialCreateWithoutAuthorInput {
  id: ID
  title: String!
  desc: String
  content: String
  published: Boolean
}

type MaterialEdge {
  node: Material!
  cursor: String!
}

enum MaterialOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  desc_ASC
  desc_DESC
  content_ASC
  content_DESC
  published_ASC
  published_DESC
}

type MaterialPreviousValues {
  id: ID!
  title: String!
  desc: String
  content: String
  published: Boolean!
}

input MaterialScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [MaterialScalarWhereInput!]
  OR: [MaterialScalarWhereInput!]
  NOT: [MaterialScalarWhereInput!]
}

type MaterialSubscriptionPayload {
  mutation: MutationType!
  node: Material
  updatedFields: [String!]
  previousValues: MaterialPreviousValues
}

input MaterialSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MaterialWhereInput
  AND: [MaterialSubscriptionWhereInput!]
  OR: [MaterialSubscriptionWhereInput!]
  NOT: [MaterialSubscriptionWhereInput!]
}

input MaterialUpdateInput {
  title: String
  desc: String
  content: String
  published: Boolean
  author: UserUpdateOneWithoutMaterialsInput
}

input MaterialUpdateManyDataInput {
  title: String
  desc: String
  content: String
  published: Boolean
}

input MaterialUpdateManyMutationInput {
  title: String
  desc: String
  content: String
  published: Boolean
}

input MaterialUpdateManyWithoutAuthorInput {
  create: [MaterialCreateWithoutAuthorInput!]
  delete: [MaterialWhereUniqueInput!]
  connect: [MaterialWhereUniqueInput!]
  set: [MaterialWhereUniqueInput!]
  disconnect: [MaterialWhereUniqueInput!]
  update: [MaterialUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [MaterialUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [MaterialScalarWhereInput!]
  updateMany: [MaterialUpdateManyWithWhereNestedInput!]
}

input MaterialUpdateManyWithWhereNestedInput {
  where: MaterialScalarWhereInput!
  data: MaterialUpdateManyDataInput!
}

input MaterialUpdateWithoutAuthorDataInput {
  title: String
  desc: String
  content: String
  published: Boolean
}

input MaterialUpdateWithWhereUniqueWithoutAuthorInput {
  where: MaterialWhereUniqueInput!
  data: MaterialUpdateWithoutAuthorDataInput!
}

input MaterialUpsertWithWhereUniqueWithoutAuthorInput {
  where: MaterialWhereUniqueInput!
  update: MaterialUpdateWithoutAuthorDataInput!
  create: MaterialCreateWithoutAuthorInput!
}

input MaterialWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [MaterialWhereInput!]
  OR: [MaterialWhereInput!]
  NOT: [MaterialWhereInput!]
}

input MaterialWhereUniqueInput {
  id: ID
}

type Mutation {
  createMaterial(data: MaterialCreateInput!): Material!
  updateMaterial(data: MaterialUpdateInput!, where: MaterialWhereUniqueInput!): Material
  updateManyMaterials(data: MaterialUpdateManyMutationInput!, where: MaterialWhereInput): BatchPayload!
  upsertMaterial(where: MaterialWhereUniqueInput!, create: MaterialCreateInput!, update: MaterialUpdateInput!): Material!
  deleteMaterial(where: MaterialWhereUniqueInput!): Material
  deleteManyMaterials(where: MaterialWhereInput): BatchPayload!
  createSystem(data: SystemCreateInput!): System!
  updateSystem(data: SystemUpdateInput!, where: SystemWhereUniqueInput!): System
  updateManySystems(data: SystemUpdateManyMutationInput!, where: SystemWhereInput): BatchPayload!
  upsertSystem(where: SystemWhereUniqueInput!, create: SystemCreateInput!, update: SystemUpdateInput!): System!
  deleteSystem(where: SystemWhereUniqueInput!): System
  deleteManySystems(where: SystemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  material(where: MaterialWhereUniqueInput!): Material
  materials(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Material]!
  materialsConnection(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MaterialConnection!
  system(where: SystemWhereUniqueInput!): System
  systems(where: SystemWhereInput, orderBy: SystemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [System]!
  systemsConnection(where: SystemWhereInput, orderBy: SystemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SystemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  material(where: MaterialSubscriptionWhereInput): MaterialSubscriptionPayload
  system(where: SystemSubscriptionWhereInput): SystemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type System {
  id: ID!
  name: String!
  slogan: String
  tel: String
  version_code: String
}

type SystemConnection {
  pageInfo: PageInfo!
  edges: [SystemEdge]!
  aggregate: AggregateSystem!
}

input SystemCreateInput {
  id: ID
  name: String!
  slogan: String
  tel: String
  version_code: String
}

type SystemEdge {
  node: System!
  cursor: String!
}

enum SystemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slogan_ASC
  slogan_DESC
  tel_ASC
  tel_DESC
  version_code_ASC
  version_code_DESC
}

type SystemPreviousValues {
  id: ID!
  name: String!
  slogan: String
  tel: String
  version_code: String
}

type SystemSubscriptionPayload {
  mutation: MutationType!
  node: System
  updatedFields: [String!]
  previousValues: SystemPreviousValues
}

input SystemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SystemWhereInput
  AND: [SystemSubscriptionWhereInput!]
  OR: [SystemSubscriptionWhereInput!]
  NOT: [SystemSubscriptionWhereInput!]
}

input SystemUpdateInput {
  name: String
  slogan: String
  tel: String
  version_code: String
}

input SystemUpdateManyMutationInput {
  name: String
  slogan: String
  tel: String
  version_code: String
}

input SystemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slogan: String
  slogan_not: String
  slogan_in: [String!]
  slogan_not_in: [String!]
  slogan_lt: String
  slogan_lte: String
  slogan_gt: String
  slogan_gte: String
  slogan_contains: String
  slogan_not_contains: String
  slogan_starts_with: String
  slogan_not_starts_with: String
  slogan_ends_with: String
  slogan_not_ends_with: String
  tel: String
  tel_not: String
  tel_in: [String!]
  tel_not_in: [String!]
  tel_lt: String
  tel_lte: String
  tel_gt: String
  tel_gte: String
  tel_contains: String
  tel_not_contains: String
  tel_starts_with: String
  tel_not_starts_with: String
  tel_ends_with: String
  tel_not_ends_with: String
  version_code: String
  version_code_not: String
  version_code_in: [String!]
  version_code_not_in: [String!]
  version_code_lt: String
  version_code_lte: String
  version_code_gt: String
  version_code_gte: String
  version_code_contains: String
  version_code_not_contains: String
  version_code_starts_with: String
  version_code_not_starts_with: String
  version_code_ends_with: String
  version_code_not_ends_with: String
  AND: [SystemWhereInput!]
  OR: [SystemWhereInput!]
  NOT: [SystemWhereInput!]
}

input SystemWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  role: String
  name: String!
  nickname: String
  password: String
  email: String
  openid: String
  materials(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Material!]
  status: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  role: String
  name: String!
  nickname: String
  password: String
  email: String
  openid: String
  materials: MaterialCreateManyWithoutAuthorInput
  status: String
}

input UserCreateOneWithoutMaterialsInput {
  create: UserCreateWithoutMaterialsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMaterialsInput {
  id: ID
  role: String
  name: String!
  nickname: String
  password: String
  email: String
  openid: String
  status: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  name_ASC
  name_DESC
  nickname_ASC
  nickname_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  openid_ASC
  openid_DESC
  status_ASC
  status_DESC
}

type UserPreviousValues {
  id: ID!
  role: String
  name: String!
  nickname: String
  password: String
  email: String
  openid: String
  status: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  role: String
  name: String
  nickname: String
  password: String
  email: String
  openid: String
  materials: MaterialUpdateManyWithoutAuthorInput
  status: String
}

input UserUpdateManyMutationInput {
  role: String
  name: String
  nickname: String
  password: String
  email: String
  openid: String
  status: String
}

input UserUpdateOneWithoutMaterialsInput {
  create: UserCreateWithoutMaterialsInput
  update: UserUpdateWithoutMaterialsDataInput
  upsert: UserUpsertWithoutMaterialsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMaterialsDataInput {
  role: String
  name: String
  nickname: String
  password: String
  email: String
  openid: String
  status: String
}

input UserUpsertWithoutMaterialsInput {
  update: UserUpdateWithoutMaterialsDataInput!
  create: UserCreateWithoutMaterialsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  openid: String
  openid_not: String
  openid_in: [String!]
  openid_not_in: [String!]
  openid_lt: String
  openid_lte: String
  openid_gt: String
  openid_gte: String
  openid_contains: String
  openid_not_contains: String
  openid_starts_with: String
  openid_not_starts_with: String
  openid_ends_with: String
  openid_not_ends_with: String
  materials_every: MaterialWhereInput
  materials_some: MaterialWhereInput
  materials_none: MaterialWhereInput
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  openid: String
}
`